# Use the latest version of Docker Compose.
version: "3.5"

# Not all of our services need to be able to talk to each other. It is best to
# keep them separated where we can.
networks:

  # Ultimately, we'll only expose the proxy service publicly. That means that
  # all services that we need to be publicly accessible through the proxy need
  # to be able to talk to the proxy.
  proxied:

  # Then there are those services that don't need to be publicly accessible and
  # only communicate with other services. They go into the protected network.
  protected:

# We want to spawn several separate services from Docker images and manage all
# of them from this file.
services:

  ##############################################################################
  #
  # Proxy
  #   We use Nginx as a reverse proxy to direct requests to the ports of the
  #   correct services. This way we can hide the application's inner network.
  #
  ##############################################################################
  proxy:
    container_name: reachable.proxy.development

    # We can use the latest version of Nginx.
    image: nginx:latest

    # We want to expose at port 8004.
    ports:
      - 8004:80

    # We can use volumes to copy our reverse proxy configuration into Nginx.
    volumes:
      # Use the development configuration to expose only what's necessary.
      - ./proxy/development.conf:/etc/nginx/nginx.conf
      - ./proxy/error.log:/etc/nginx/error_log.log

    # The proxy needs access to the publicly accessible services.
    depends_on:
      - client
      - api

    # We need access to all the services that should be exposed (partly)
    # publicly.
    networks:
      - proxied

  ##############################################################################
  #
  # Client
  #   This is the service that serves all client-side files.
  #
  ##############################################################################
  client:
    container_name: reachable.client.development

    # We always want to restart when things go wrong.
    restart: always

    # We want to build from the development dockerfile in the client directory.
    build:
      context: ./client/
      dockerfile: development.dockerfile

    # Pass on the environment variables to the client service.
    environment:
      # Tell the client where to reach the API.
      - API_URL=http://localhost:8004/api/

    # We can expose the client service in the container network.
    expose:
      - "8000"

    # We want to bind the changes inside the container to a local folder so that
    # we can update the code in real time.
    volumes:
      - ./client:/client

    # We need the reverse proxy to expose the client publicly, so we need to
    # give it access to the client service.
    networks:
      - proxied

  ##############################################################################
  #
  # API
  #   This is the service that serves all server-side requests.
  #
  ##############################################################################
  api:
    container_name: reachable.api.development

    # We always want to restart when things go wrong.
    restart: always

    # We want to build from the development dockerfile in the API directory.
    build:
      context: ./api/
      dockerfile: development.dockerfile

    # The api will need to some hosting information. Any external information
    # that is not set in this file is expected to be supplied through
    # environment variables.
    environment:
      # Tell the API where to reach the client.
      - CLIENT_URL=http://localhost:8004/

      # Tell the API how to connect to the database.
      - DATABASE_HOST=database
      - DATABASE_PORT=27017
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}

      # Tell the API how to connect to the mailserver.
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM}

    # We can expose the api service in the container network.
    expose:
      - "3000"

    # We want to bind the changes inside the container to a local folder so that
    # we can update the code in real time.
    volumes:
      - ./api:/api

    # The API will try to connect to the database, so we need to make sure that
    # they are running before we initialize the API.
    depends_on:
      database:
        condition: service_healthy

    # We need the reverse proxy to expose the API publicly, so we need to
    # give it access to the API service. In addition, it needs to be able to
    # communicate to the database, so it also requires access to the protected
    # network.
    networks:
      - proxied
      - protected

  ##############################################################################
  #
  # Database
  #   This is a NoSQL MongoDB database that we can use for scalable persistent
  #   data. MongoDB will store any document, but we can configure specific
  #   models and schemas in the API.
  #
  ##############################################################################
  database:
    container_name: reachable.database.development

    # We can pull the latest MongoDB version. Running this older version because
    # my local machine lacks the AVX support for Mongo 5+.
    image: mongo:4.4.6

    # We can expose the default MongoDB port database service in the proxy
    # network.
    expose:
      - "27017"

    # We need to designate a volume on physical disk to persist data between
    # restarts.
    volumes:
      - ./database:/data/db

    # We want to fire up MongoDB with the proper credentials.
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DATABASE_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${DATABASE_PASSWORD}

    # We need a health check to see if the database is running correctly to make
    # sure that we can restart the api to reconnect if any issues occur.
    healthcheck:

      # The health check command to run.
      test: echo 'db.runCommand("ping").ok' | mongo database:27017/test --quiet

      # The interval with which to perform the health check.
      interval: 10s

      # If a check takes longer than 10 seconds, we consider it failed.
      timeout: 10s

      # We retry the health check 3 times before we declare it unhealthy.
      retries: 3

      # We give the database 30 seconds to start up on initialization before we
      # start declaring it unhealthy.
      start_period: 30s

    # We want to try and restart the database if any issues arise.
    restart: unless-stopped

    # Only the api needs access to the database, so it does not need to be
    # publicly available. We can add it to the protected network.
    networks:
      - protected